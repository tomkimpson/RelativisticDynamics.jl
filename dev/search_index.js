var documenterSearchIndex = {"docs":
[{"location":"functions_index/#Index-of-all-functions","page":"Functions Index","title":"Index of all functions","text":"","category":"section"},{"location":"functions_index/","page":"Functions Index","title":"Functions Index","text":"","category":"page"},{"location":"functions_index/","page":"Functions Index","title":"Functions Index","text":"Modules = [RelativisticDynamics]","category":"page"},{"location":"functions_index/#RelativisticDynamics.Constants","page":"Functions Index","title":"RelativisticDynamics.Constants","text":"C = Constants(P)\n\nA struct to hold all variables which are constant over the course of the integration. These are derived from the user-defined parameters \n\n\n\n\n\n","category":"type"},{"location":"functions_index/#RelativisticDynamics.Constants-Tuple{RelativisticDynamics.SystemParameters}","page":"Functions Index","title":"RelativisticDynamics.Constants","text":"Generator function for a Constants struct.\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.Model","page":"Functions Index","title":"RelativisticDynamics.Model","text":"M = Model(P,C)\n\nThe model struct which holds all the parameters (P) and constants (C)\n\n\n\n\n\n","category":"type"},{"location":"functions_index/#RelativisticDynamics.PrognosticVariables","page":"Functions Index","title":"RelativisticDynamics.PrognosticVariables","text":"Struct holding the so-called 'prognostic' variables. 'Prognostic' terminology is borrowed from cliamte science where it refers to  any variables that are predicted via integration\n\n\n\n\n\n","category":"type"},{"location":"functions_index/#RelativisticDynamics.SystemParameters","page":"Functions Index","title":"RelativisticDynamics.SystemParameters","text":"P = Parameters(kwargs...)\n\nA struct to hold all model parameters that may be changed by the user. The struct uses keywords such that default values can be changed at creation. The default values of the keywords define the default model setup.\n\n\n\n\n\n","category":"type"},{"location":"functions_index/#RecipesBase.apply_recipe-Tuple{AbstractDict{Symbol, Any}, SciMLBase.ODESolution, AbstractFloat}","page":"Functions Index","title":"RecipesBase.apply_recipe","text":"Plotting recipe for use with Plots.jl\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.ELQ-NTuple{5, Any}","page":"Functions Index","title":"RelativisticDynamics.ELQ","text":"E,L,Q = ELQ(a,α,e,ι,D)\n\nCalculate the energy, angular momentum and Carter constant given the Keplerian orbital parameters, and the BH spin/direction Specific to the Kerr metric, see Schmidt 2002 arXiv:0202090\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.bounds_checks-Tuple{RelativisticDynamics.SystemParameters}","page":"Functions Index","title":"RelativisticDynamics.bounds_checks","text":"bounds_checks(P)\n\nLook before you leap - are the user-specified kwargs in parameters physical and reasonable?\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.christoffel-Tuple{Any, Any}","page":"Functions Index","title":"RelativisticDynamics.christoffel","text":"Γ = christoffel(coords,a)\n\nThe christoffel symbols of the Kerr metric. See e.g. https://arxiv.org/pdf/0904.4184.pdf\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.contravariant_metric-Tuple{Any, Any}","page":"Functions Index","title":"RelativisticDynamics.contravariant_metric","text":"g=contravariant_metric(coords,a)\n\nConstruct the NxN matrix of the contravariant metric. Metric components are defined via indvidual functions to allow for auto diff in unit tests\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.convert_to_covariant-Tuple{Any, Any}","page":"Functions Index","title":"RelativisticDynamics.convert_to_covariant","text":"p_{μ} = convert_to_covariant(metric,p^{μ})\n\nConvert a vector from contravariant form to convariant form using the covariant metric \n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.delta-Tuple{Any, Any}","page":"Functions Index","title":"RelativisticDynamics.delta","text":"Δ = delta(r,a)\n\nThe well-known delta function of the Kerr metric\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.initial_conditions-Tuple{Any}","page":"Functions Index","title":"RelativisticDynamics.initial_conditions","text":"initialization = initial_conditions(M)\n\nSetup the initial conditions for the MPD orbital dynamics\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.levi_civita_symbol-Tuple{}","page":"Functions Index","title":"RelativisticDynamics.levi_civita_symbol","text":"l = levi_civita_symbol(NF)\n\nDetermine the Levi-civita psuedo tensor\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.levi_civita_tensor-Tuple{Any}","page":"Functions Index","title":"RelativisticDynamics.levi_civita_tensor","text":"ϵ = levi_civita_tensor(metric)\n\nCalcualte the Levi-civita tensor in an arbitrary basis.\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.orbit-Union{Tuple{}, Tuple{Type{NF}}, Tuple{NF}} where NF<:AbstractFloat","page":"Functions Index","title":"RelativisticDynamics.orbit","text":"solution,model = orbit(NF,kwargs...)\n\nRuns RelativisticDynamics.jl with number format NF and any additional parameters in the keyword arguments kwargs.... Any unspecified parameters will use the default values as defined in src/system_parameters.jl.\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.riemann-Tuple{Any, Any}","page":"Functions Index","title":"RelativisticDynamics.riemann","text":"R = riemann(coords,a)\n\nRiemann tensor components of the Kerr metric. First index is the contravariant, others are covariant   \n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.sigma-Tuple{Any, Any, Any}","page":"Functions Index","title":"RelativisticDynamics.sigma","text":"Σ = sigma(r,θ,a)\n\nThe well-known sigma function of the Kerr metric\n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.spintensor-NTuple{4, Any}","page":"Functions Index","title":"RelativisticDynamics.spintensor","text":"S^{μ ν} = spintensor(levi,pvector,svector,m0)\n\nCalculate the contravariant spin tensor. \n\n\n\n\n\n","category":"method"},{"location":"functions_index/#RelativisticDynamics.timestepping-Tuple{RelativisticDynamics.PrognosticVariables, Any}","page":"Functions Index","title":"RelativisticDynamics.timestepping","text":"solution = timestepping(X,M)\n\nThe timestepping integration once all variables have been initialised\n\n\n\n\n\n","category":"method"},{"location":"IC/#Initial-Conditions","page":"Initial Conditions","title":"Initial Conditions","text":"","category":"section"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"We need to initialise 3 vectors x^mu p^mu s^mu for position, momentum and spin respectively. All this takes place in src/universal_constants.jl and src/initial_conditions.jl.","category":"page"},{"location":"IC/#Position,-x{\\mu}","page":"Initial Conditions","title":"Position, x^mu","text":"","category":"section"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"The initial coordinates are specified straightforwardly. Working in Boyer-Lindquist coordinates, we set t=0, theta = pi2, phi=00 and set the radial coordinate r equal to the value of the semi-major axis alpha specified in src/system_parameters.jl. ","category":"page"},{"location":"IC/#Momentum,-p{\\mu}","page":"Initial Conditions","title":"Momentum, p^mu","text":"","category":"section"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"The specification of the initial momentum proceeds via two steps.","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"Map from the user-specified Keplerian orbital parameters to the conserved quantities\nDefine the momenta from the first-order equations of motion derived from the Hamilton-Jacobi function for the Kerr metric.","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"Both of these steps are well-described in Schmidt 2002. The general overview is as follows:","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"For the Kerr spacetime we have 3 conserved quantities, the energy E, the angular momentum L_z and the Carter constant Q. We want to be able to determine the value of these quantities, given the Keplerian orbital parameters, alpha e iota. ","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"Given the first order ODEs for r and theta from the Kerr Hamiltonian, solve ","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"fracdrdlambda = 0    fracdthetadlambda = 0","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"i.e. the turning points of the radial and polar motion. One can solve these equations to find ELQ given alpha e iota. ","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"With the conserved quantities in hand, the 4-velocity is defined from the Kerr Hamiltonian,","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"Sigma fracdtdlambda = fracr^2 + a^2Delta P - a(aEsin^2 theta -L_z)","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"Sigma fracdrdlambda = pm sqrtR","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"Sigma fracdthetadlambda = pm sqrtTheta","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"Sigma fracdphidlambda = fracaDelta - aE + fracL_zsin^2 theta","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"where RTheta and P are again given in Schmidt 2002. We always take the positive square root for the initialisation, such that the initial motion of the pulsar is \"outwards and upwards\" (increasing r and theta). ","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"The covariant 4-velocity can then be translated into a contravariant 4-momentum as p^alpha = m g^alpha beta u_beta for metric g^alpha beta.","category":"page"},{"location":"IC/#Spin,-s{\\mu}","page":"Initial Conditions","title":"Spin, s^mu","text":"","category":"section"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"In order to determine the spin vector we must first specify the moment of inertia of the pulsar. We model the pulsar as a solid sphere such that","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"I = frac25 m_rm PSR r_rm PSR^2","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"The angular momentum/spin magnitude is, ","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"s_0 = 2 pi I  P_rm PSR","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"where P_rm PSR is the spin period of the pulsar. The spatial components of the spin vector are then,","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"s^r = s_0 sin(S_theta) cos(S_phi)","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"s^theta = -s_0 cos(S_theta)r","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"s^phi = s_0 sin(S_theta) sin(S_phi)r sin(theta)","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"where S_theta phi are the latitude and azimuthal angles of the spin axis, see e.g. Mashhoon & Singh, 2006. The temporal component s^t is enforced by the spin condition. Throughout this package we take the Tulczyjew-Dixon (TD) condition ","category":"page"},{"location":"IC/","page":"Initial Conditions","title":"Initial Conditions","text":"s^mup_mu  = 0 see e.g. Costa & Natário, 2015 for discussion of the TD condition and other options","category":"page"},{"location":"how_to_run/#How-to-run-RelativisticDynamics.jl","page":"How to run RelativisticDynamics.jl","title":"How to run RelativisticDynamics.jl","text":"","category":"section"},{"location":"how_to_run/","page":"How to run RelativisticDynamics.jl","title":"How to run RelativisticDynamics.jl","text":"The simplest way to run RelativisticDynamics.jl with default parameters is","category":"page"},{"location":"how_to_run/","page":"How to run RelativisticDynamics.jl","title":"How to run RelativisticDynamics.jl","text":"using RelativisticDynamics\nsolution,model = orbit()","category":"page"},{"location":"how_to_run/","page":"How to run RelativisticDynamics.jl","title":"How to run RelativisticDynamics.jl","text":"The orbit() function returns two objects. The first, solution holds the evolution of the position, momentum and spin vectors. The second, model, holds a copy of all the parameters and settings used to generate the solution, e.g. what was the BH spin?","category":"page"},{"location":"how_to_run/","page":"How to run RelativisticDynamics.jl","title":"How to run RelativisticDynamics.jl","text":"All default parameters can be found in src/system_parameters.jl. Passing a keyword argument to orbit() overrides the defaults e.g.","category":"page"},{"location":"how_to_run/","page":"How to run RelativisticDynamics.jl","title":"How to run RelativisticDynamics.jl","text":"using RelativisticDynamics\nsolution,model = orbit(e=0.6,a=0.99);\nmodel.constants.a\n# output\n0.99","category":"page"},{"location":"how_to_run/","page":"How to run RelativisticDynamics.jl","title":"How to run RelativisticDynamics.jl","text":"generates the solution for a system with an eccentricity = 0.6, around a BH with an extremal spin. ","category":"page"},{"location":"how_to_run/","page":"How to run RelativisticDynamics.jl","title":"How to run RelativisticDynamics.jl","text":"If provided, the number format has to be the first argument, all other arguments are keyword arguments. e.g. ","category":"page"},{"location":"how_to_run/","page":"How to run RelativisticDynamics.jl","title":"How to run RelativisticDynamics.jl","text":"using RelativisticDynamics\nsolution,model = orbit(Float32,e=0.6,a=0.99);\nmodel.parameters.NF\n# output\nFloat32","category":"page"},{"location":"how_to_run/","page":"How to run RelativisticDynamics.jl","title":"How to run RelativisticDynamics.jl","text":"Please see notebooks/demo.ipynb for some worked examples using RelativisticDynamics.jl, including the application of autodiff methods.","category":"page"},{"location":"visualisation/#Visualisation-of-the-solution","page":"Visualisation","title":"Visualisation of the solution","text":"","category":"section"},{"location":"visualisation/","page":"Visualisation","title":"Visualisation","text":"It is often desireable, as a sanity check, to plot the orbital solution. Once the orbit() call completes, the output can be quickly plotted using the usual Plots.jl interface e.g.","category":"page"},{"location":"visualisation/","page":"Visualisation","title":"Visualisation","text":"using Plots\nusing RelativisticDynamics\n\nsolution,model = orbit()\nplot(solution,model.constants.a) ","category":"page"},{"location":"visualisation/","page":"Visualisation","title":"Visualisation","text":"By default the plotting recipe plots the x-y orbital trajectory and up-samples the numerical solution by a factor of 10. The user can define their own up-sampling factor, and pass any two of the integration variables as arguments, as well as the Cartesian coordinates (xyz). For example:","category":"page"},{"location":"visualisation/","page":"Visualisation","title":"Visualisation","text":"plot(solution,model.constants.a,upsample=2, vars_to_plot = [:t,:r])     # Plot a timeseries of the r-coordinate, upsampled by a factor of 2\nplot(solution,model.constants.a,upsample=100, vars_to_plot = [:sθ,:sϕ]) # Plot the θ-ϕ components of the spin vector against each other, upsampled by a factor of 100\nplot(solution,model.constants.a,vars_to_plot = [:x,:z]) # Plot the x-z orbital trajectory\n","category":"page"},{"location":"MPD/#Mathisson-Papetrou-Dixon-Equations","page":"MPD Equations","title":"Mathisson-Papetrou-Dixon Equations","text":"","category":"section"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"The MPD equations are derived from the conservation of the energy-momentum tensor:","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"T^mu nu_nu = 0","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"Taking the multipole expansion leads to a description of the momentum vector p^mu (0th moment) and the spin tensor s^mu nu (dipole moment)","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"fracDp^mud lambda = -frac12R^mu_nu alpha beta u^nu s^alpha beta","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"fracDs^mu nud lambda =p^muu^nu - p^nuu^mu","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"for affine parameter lambda, 4-velocity u^nu and Riemann curvature tensor R^mu_nu alpha beta, with fracDdlambda denoting a covariant derivative. We ignore the higher order moments since for pulsar mass (m) << BH mass (M) and pulsar radius << BH radius, the motion is dominated by the lowest order moments. ","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"The system is closed by providing a spin supplementary condition (SSC). Choosing an SSC is equivalent to choosing the observer who measures the centre of mass of the spinning body - in GR the centre of mass is observer dependent! Multiple SSCs exist, and different choices of SSC will naturally lead to different solutions for the system. However, for the Kerr spacetime and within the pole-dipole approximation (see below) all these solutions for the centre of mass (the \"minimal worldtube\") are contained within the convex hull of the body's worldtube (see Costa & Natário, 2015 for an thorough discussion of the spin conditions). Throughout this package we take the Tulczyjew-Dixon (TD) condition","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"s^mu nu p_nu = 0","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"which is equivalent to choosing the centre of mass to be the one measured in the zero-3 momentum frame, which has the advantage of specifying a unique worldline ","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"In the extreme mass ratio limit m << M, the pulsar Möller radius is much less than the gravitational lengthscale. This means that the pole-dipole interaction is much stronger than the dipole-dipole interaction. Within this approximation, the MPD equations reduced to a set of ODEs (see e.g. Mashoon & Singh, 2006, Singh, Wu & Sarty, 2014)","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"fracdp^alphadlambda = - Gamma_munu^alpha p^muu^nu +  left( frac12m R^alpha_beta rho sigma epsilon^rho sigma_quad mu nu s^mu p^nu u^betaright)  ","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"fracds^alphad lambda = - Gamma^alpha_mu nu s^muu^nu + left(frac12m^3R_gamma beta rho sigma epsilon^rho sigma_quad mu nu s^mu p^nu s^gamma u^betaright)p^alpha  ","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"fracdx^alphadlambda = -fracp^deltau_deltam^2 left p^alpha + frac12 frac (s^alpha beta R_beta gamma mu nu p^gamma s^mu nu)m^2 + (R_mu nu rho sigma s^mu nu s^rho sigma4)right","category":"page"},{"location":"MPD/","page":"MPD Equations","title":"MPD Equations","text":"Whilst lambda has the freedom to be any affine parameter, we take it to be the proper time tau such that g_mu nuu^mu u^nu=-1. These equations are generally covariant - we take the astrophysically motivated Kerr metric for a spinning BH and work in Boyer-Lindquist coordinates.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = RelativisticDynamics","category":"page"},{"location":"#RelativisticDynamics.jl-documentation","page":"Home","title":"RelativisticDynamics.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for RelativisticDynamics.jl, a relativistic orbital dynamics model for simulating spinning objects in curved spacetime.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RelativisticDynamics.jl is a numerical model for determining the spin-orbital dynamics of a spinning body, such as a pulsar, on a background Kerr spacetime. The code solves a set of ODEs numerically. These equations are based on the original works of Mathisson 1937, Papapetrou 1951 and Dixon 1964. Consequently these equations are known as the MPD equations. More recent works can be found in Mashoon & Singh 2006, Singh 2005, Singh, Wu & Sarty 2014 and Li,Wu & Singh 2019. Additional interesting discussion on the motion of extended bodies in GR can be found in Costa & Natário, 2015","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please see the following pages of the documentation for more details    ","category":"page"},{"location":"","page":"Home","title":"Home","text":"How to run RelativisticDynamics.jl\nInitial conditions\nMPD Equations\nVisualisation\nIndex of functions   ","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As well as accurately describing the relativistic spin-orbital evolution of a spinning body in a curved spacetime RelativisticDynamics.jl is written in a way so as to be fully flexible in the number format. This enables the model to run not only at various levels of native precision (e.g. half/single/double) but also use custom number formats (e.g. Stochastic Rounding). Moreover, RelativisticDynamics.jl is generally differentiable using Zygote.jl, allowing for the input parameters to be tuned with respect to some user-defined loss function.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RelativisticDynamics.jl is registered in the Julia Registry. To install RelativisticDynamics.jl and its associated dependencies just:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.7) pkg> add RelativisticDynamics","category":"page"},{"location":"","page":"Home","title":"Home","text":"which will automatically install the latest release. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Direct installation from the git branch is also possible:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.7) pkg> add https://github.com/tomkimpson/RelativisticDynamics.jl#branch_name","category":"page"},{"location":"#Troubleshooting-and-contributions","page":"Home","title":"Troubleshooting and contributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For any questions or problems, please feel free to open an issue","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contributions are always welcome - just open a pull request.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This work solving the MPD equations was originally motivated through interesting discussions with Kinwah Wu. The port to a modern, precision-flexible model in Julia was heavily inspired by Milan Klöwer. Huge thanks to both.","category":"page"}]
}
